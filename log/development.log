

Started GET "/blogposts" for 127.0.0.1 at 2014-08-09 20:46:42 -0700

ActionController::RoutingError (No route matches [GET] "/blogposts"):
  actionpack (4.1.1) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.1.1) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.1.1) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.1.1) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.1.1) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.1.1) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.1.1) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.5.2) lib/rack/methodoverride.rb:21:in `call'
  rack (1.5.2) lib/rack/runtime.rb:17:in `call'
  activesupport (4.1.1) lib/active_support/cache/strategy/local_cache_middleware.rb:26:in `call'
  rack (1.5.2) lib/rack/lock.rb:17:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/static.rb:64:in `call'
  rack (1.5.2) lib/rack/sendfile.rb:112:in `call'
  railties (4.1.1) lib/rails/engine.rb:514:in `call'
  railties (4.1.1) lib/rails/application.rb:144:in `call'
  rack (1.5.2) lib/rack/lock.rb:17:in `call'
  rack (1.5.2) lib/rack/content_length.rb:14:in `call'
  rack (1.5.2) lib/rack/handler/webrick.rb:60:in `service'
  /opt/twitter/rvm/rubies/ruby-2.0.0-p247/lib/ruby/2.0.0/webrick/httpserver.rb:138:in `service'
  /opt/twitter/rvm/rubies/ruby-2.0.0-p247/lib/ruby/2.0.0/webrick/httpserver.rb:94:in `run'
  /opt/twitter/rvm/rubies/ruby-2.0.0-p247/lib/ruby/2.0.0/webrick/server.rb:295:in `block in start_thread'


  Rendered /opt/twitter/rvm/gems/ruby-2.0.0-p247@global/gems/actionpack-4.1.1/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (0.9ms)
  Rendered /opt/twitter/rvm/gems/ruby-2.0.0-p247@global/gems/actionpack-4.1.1/lib/action_dispatch/middleware/templates/routes/_table.html.erb (5.4ms)
  Rendered /opt/twitter/rvm/gems/ruby-2.0.0-p247@global/gems/actionpack-4.1.1/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (19.6ms)


Started GET "/" for 127.0.0.1 at 2014-08-09 20:46:45 -0700
Processing by Rails::WelcomeController#index as HTML
  Rendered /opt/twitter/rvm/gems/ruby-2.0.0-p247@global/gems/railties-4.1.1/lib/rails/templates/rails/welcome/index.html.erb (0.9ms)
Completed 200 OK in 11ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2014-08-09 20:56:28 -0700
Processing by Rails::WelcomeController#index as HTML
  Rendered /opt/twitter/rvm/gems/ruby-2.0.0-p247@global/gems/railties-4.1.1/lib/rails/templates/rails/welcome/index.html.erb (1.0ms)
Completed 200 OK in 12ms (Views: 4.7ms | ActiveRecord: 0.0ms)
  [1m[36m (1.0ms)[0m  [1mCREATE TABLE "schema_migrations" ("version" varchar(255) NOT NULL) [0m
  [1m[35m (0.5ms)[0m  select sqlite_version(*)
  [1m[36m (0.9ms)[0m  [1mCREATE UNIQUE INDEX "unique_schema_migrations" ON "schema_migrations" ("version")[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.1ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
Migrating to CreateUsers (20140810041815)
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35m (0.3ms)[0m  CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar(255), "email" varchar(255), "created_at" datetime, "updated_at" datetime) 
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "schema_migrations" ("version") VALUES (?)[0m  [["version", "20140810041815"]]
  [1m[35m (0.7ms)[0m  commit transaction
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m


Started GET "/" for 127.0.0.1 at 2014-08-09 21:18:36 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by Rails::WelcomeController#index as HTML
  Rendered /opt/twitter/rvm/gems/ruby-2.0.0-p247@global/gems/railties-4.1.1/lib/rails/templates/rails/welcome/index.html.erb (1.5ms)
Completed 200 OK in 14ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2014-08-09 21:18:55 -0700
Processing by UsersController#index as HTML
  [1m[35mUser Load (0.1ms)[0m  SELECT "users".* FROM "users"
  Rendered users/index.html.erb within layouts/application (1.5ms)
Completed 200 OK in 523ms (Views: 520.3ms | ActiveRecord: 0.1ms)


Started GET "/assets/users.css?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/assets/scaffolds.css?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/assets/jquery.js?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/assets/application.css?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/assets/users.js?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/assets/jquery_ujs.js?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/assets/turbolinks.js?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/assets/application.js?body=1" for 127.0.0.1 at 2014-08-09 21:18:56 -0700


Started GET "/users/new" for 127.0.0.1 at 2014-08-09 21:18:59 -0700
Processing by UsersController#new as HTML
  Rendered users/_form.html.erb (24.1ms)
  Rendered users/new.html.erb within layouts/application (29.5ms)
Completed 200 OK in 37ms (Views: 35.3ms | ActiveRecord: 0.4ms)


Started POST "/users" for 127.0.0.1 at 2014-08-09 21:19:10 -0700
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"âœ“", "authenticity_token"=>"oUG9O2MJLze33etPb5RaoKB1r0dNKysN5+VoF496N7g=", "user"=>{"name"=>"user1", "email"=>"user1@email.com"}, "commit"=>"Create User"}
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "users" ("created_at", "email", "name", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", "2014-08-10 04:19:10.577051"], ["email", "user1@email.com"], ["name", "user1"], ["updated_at", "2014-08-10 04:19:10.577051"]]
  [1m[36m (1.1ms)[0m  [1mcommit transaction[0m
Redirected to http://0.0.0.0:3000/users/1
Completed 302 Found in 7ms (ActiveRecord: 1.6ms)


Started GET "/users/1" for 127.0.0.1 at 2014-08-09 21:19:10 -0700
Processing by UsersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users"  WHERE "users"."id" = ? LIMIT 1  [["id", 1]]
  Rendered users/show.html.erb within layouts/application (0.7ms)
Completed 200 OK in 7ms (Views: 4.2ms | ActiveRecord: 0.2ms)


Started GET "/assets/scaffolds.css?body=1" for 127.0.0.1 at 2014-08-09 21:19:10 -0700


Started GET "/assets/users.js?body=1" for 127.0.0.1 at 2014-08-09 21:19:10 -0700


Started GET "/assets/users.css?body=1" for 127.0.0.1 at 2014-08-09 21:19:10 -0700


Started GET "/users" for 127.0.0.1 at 2014-08-09 21:19:13 -0700
Processing by UsersController#index as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT "users".* FROM "users"[0m
  Rendered users/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 12ms (Views: 10.6ms | ActiveRecord: 0.2ms)


Started GET "/users/1" for 127.0.0.1 at 2014-08-09 21:19:15 -0700
Processing by UsersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users"  WHERE "users"."id" = ? LIMIT 1  [["id", 1]]
  Rendered users/show.html.erb within layouts/application (1.3ms)
Completed 200 OK in 11ms (Views: 9.0ms | ActiveRecord: 0.1ms)


Started GET "/users" for 127.0.0.1 at 2014-08-09 21:19:16 -0700
Processing by UsersController#index as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT "users".* FROM "users"[0m
  Rendered users/index.html.erb within layouts/application (1.7ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.2ms)
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateMicroposts (20140810042246)
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36m (0.4ms)[0m  [1mCREATE TABLE "microposts" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "content" varchar(255), "user_id" integer, "created_at" datetime, "updated_at" datetime) [0m
  [1m[35mSQL (0.1ms)[0m  INSERT INTO "schema_migrations" ("version") VALUES (?)  [["version", "20140810042246"]]
  [1m[36m (0.8ms)[0m  [1mcommit transaction[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.1ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"


Started GET "/users" for 127.0.0.1 at 2014-08-09 21:25:30 -0700
  [1m[35mActiveRecord::SchemaMigration Load (0.1ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by UsersController#index as HTML
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT "users".* FROM "users"[0m
  Rendered users/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 144ms (Views: 142.2ms | ActiveRecord: 0.3ms)


Started GET "/assets/microposts.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/users.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/jquery.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/microposts.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/scaffolds.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/application.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/turbolinks.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/users.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/jquery_ujs.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/assets/application.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:30 -0700


Started GET "/" for 127.0.0.1 at 2014-08-09 21:25:33 -0700
Processing by Rails::WelcomeController#index as HTML
  Rendered /opt/twitter/rvm/gems/ruby-2.0.0-p247@global/gems/railties-4.1.1/lib/rails/templates/rails/welcome/index.html.erb (0.1ms)
Completed 200 OK in 2ms (Views: 1.6ms | ActiveRecord: 0.0ms)


Started GET "/microposts" for 127.0.0.1 at 2014-08-09 21:25:42 -0700
Processing by MicropostsController#index as HTML
  [1m[35mMicropost Load (0.1ms)[0m  SELECT "microposts".* FROM "microposts"
  Rendered microposts/index.html.erb within layouts/application (1.3ms)
Completed 200 OK in 8ms (Views: 5.4ms | ActiveRecord: 0.1ms)


Started GET "/assets/scaffolds.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/assets/application.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/assets/jquery_ujs.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/assets/users.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/assets/jquery.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/assets/turbolinks.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/assets/users.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/assets/application.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:42 -0700


Started GET "/microposts/new" for 127.0.0.1 at 2014-08-09 21:25:44 -0700
Processing by MicropostsController#new as HTML
  Rendered microposts/_form.html.erb (9.5ms)
  Rendered microposts/new.html.erb within layouts/application (12.8ms)
Completed 200 OK in 21ms (Views: 18.9ms | ActiveRecord: 0.3ms)


Started POST "/microposts" for 127.0.0.1 at 2014-08-09 21:25:55 -0700
Processing by MicropostsController#create as HTML
  Parameters: {"utf8"=>"âœ“", "authenticity_token"=>"oUG9O2MJLze33etPb5RaoKB1r0dNKysN5+VoF496N7g=", "micropost"=>{"content"=>"micropost1", "user_id"=>"1"}, "commit"=>"Create Micropost"}
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "microposts" ("content", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?)  [["content", "micropost1"], ["created_at", "2014-08-10 04:25:55.138163"], ["updated_at", "2014-08-10 04:25:55.138163"], ["user_id", 1]]
  [1m[36m (0.8ms)[0m  [1mcommit transaction[0m
Redirected to http://0.0.0.0:3000/microposts/1
Completed 302 Found in 5ms (ActiveRecord: 1.2ms)


Started GET "/microposts/1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700
Processing by MicropostsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mMicropost Load (0.1ms)[0m  SELECT  "microposts".* FROM "microposts"  WHERE "microposts"."id" = ? LIMIT 1  [["id", 1]]
  Rendered microposts/show.html.erb within layouts/application (1.6ms)
Completed 200 OK in 7ms (Views: 5.6ms | ActiveRecord: 0.1ms)


Started GET "/assets/application.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/jquery.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/scaffolds.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/microposts.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/turbolinks.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/jquery_ujs.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/microposts.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/users.css?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/users.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/assets/application.js?body=1" for 127.0.0.1 at 2014-08-09 21:25:55 -0700


Started GET "/microposts" for 127.0.0.1 at 2014-08-09 21:26:03 -0700
Processing by MicropostsController#index as HTML
  [1m[36mMicropost Load (0.2ms)[0m  [1mSELECT "microposts".* FROM "microposts"[0m
  Rendered microposts/index.html.erb within layouts/application (4.7ms)
Completed 200 OK in 12ms (Views: 10.6ms | ActiveRecord: 0.2ms)


Started GET "/microposts/new" for 127.0.0.1 at 2014-08-09 21:26:04 -0700
Processing by MicropostsController#new as HTML
  Rendered microposts/_form.html.erb (4.0ms)
  Rendered microposts/new.html.erb within layouts/application (5.2ms)
Completed 200 OK in 14ms (Views: 12.7ms | ActiveRecord: 0.0ms)


Started POST "/microposts" for 127.0.0.1 at 2014-08-09 21:26:12 -0700
Processing by MicropostsController#create as HTML
  Parameters: {"utf8"=>"âœ“", "authenticity_token"=>"oUG9O2MJLze33etPb5RaoKB1r0dNKysN5+VoF496N7g=", "micropost"=>{"content"=>"micropost2", "user_id"=>"2"}, "commit"=>"Create Micropost"}
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "microposts" ("content", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?)[0m  [["content", "micropost2"], ["created_at", "2014-08-10 04:26:12.897597"], ["updated_at", "2014-08-10 04:26:12.897597"], ["user_id", 2]]
  [1m[35m (0.7ms)[0m  commit transaction
Redirected to http://0.0.0.0:3000/microposts/2
Completed 302 Found in 4ms (ActiveRecord: 1.1ms)


Started GET "/microposts/2" for 127.0.0.1 at 2014-08-09 21:26:12 -0700
Processing by MicropostsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mMicropost Load (0.2ms)[0m  [1mSELECT  "microposts".* FROM "microposts"  WHERE "microposts"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered microposts/show.html.erb within layouts/application (0.5ms)
Completed 200 OK in 7ms (Views: 4.8ms | ActiveRecord: 0.2ms)


Started GET "/assets/microposts.css?body=1" for 127.0.0.1 at 2014-08-09 21:26:12 -0700


Started GET "/assets/jquery_ujs.js?body=1" for 127.0.0.1 at 2014-08-09 21:26:12 -0700


Started GET "/assets/application.css?body=1" for 127.0.0.1 at 2014-08-09 21:26:12 -0700


Started GET "/assets/scaffolds.css?body=1" for 127.0.0.1 at 2014-08-09 21:26:12 -0700


Started GET "/assets/users.css?body=1" for 127.0.0.1 at 2014-08-09 21:26:13 -0700


Started GET "/assets/jquery.js?body=1" for 127.0.0.1 at 2014-08-09 21:26:13 -0700


Started GET "/assets/turbolinks.js?body=1" for 127.0.0.1 at 2014-08-09 21:26:13 -0700


Started GET "/assets/microposts.js?body=1" for 127.0.0.1 at 2014-08-09 21:26:13 -0700


Started GET "/assets/users.js?body=1" for 127.0.0.1 at 2014-08-09 21:26:13 -0700


Started GET "/assets/application.js?body=1" for 127.0.0.1 at 2014-08-09 21:26:13 -0700


Started GET "/microposts" for 127.0.0.1 at 2014-08-09 21:26:14 -0700
Processing by MicropostsController#index as HTML
  [1m[35mMicropost Load (0.2ms)[0m  SELECT "microposts".* FROM "microposts"
  Rendered microposts/index.html.erb within layouts/application (2.5ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.2ms)


Started GET "/microposts/new" for 127.0.0.1 at 2014-08-09 21:26:47 -0700
Processing by MicropostsController#new as HTML
  Rendered microposts/_form.html.erb (4.4ms)
  Rendered microposts/new.html.erb within layouts/application (5.2ms)
Completed 200 OK in 12ms (Views: 9.1ms | ActiveRecord: 0.3ms)


Started POST "/microposts" for 127.0.0.1 at 2014-08-09 21:27:24 -0700
Processing by MicropostsController#create as HTML
  Parameters: {"utf8"=>"âœ“", "authenticity_token"=>"oUG9O2MJLze33etPb5RaoKB1r0dNKysN5+VoF496N7g=", "micropost"=>{"content"=>"micropost3 cgit logo\tindex : birdcage\t   one repo to rule them all\tTwitter, Inc. summaryrefslogtreecommitdiff\t    path: root/zipbird/src/main/scala/com/twitter/zipbird/backends/Job.scala blob: bb093de37c81f695a45fc624fc3f9ae67fc6f9ec (plainpackage com.twitter.zipbird package backends  import com.twitter.zipbird.evidence.EvidenceType.EvidenceType import com.twitter.zipbird.evidence._ import com.twitter.zipbird.util._ import com.twitter.logging.Logger import com.twitter.birdherd.{User,Twitter} import com.twitter.util.{Await, Future, NonFatal, Time} import com.twitter.flockdb.client.Select import java.io.{PrintWriter, File} import com.twitter.guano.thriftscala.ZipbirdRetentionPeriod import scala.collection.mutable.ListBuffer import scala.collection.mutable.LinkedHashMap import com.twitter.ostrich.stats.Stats  class Job(user: User,           startDate: Option[Time],           endDate: Option[Time],           localEvidencePath: String,           twitter: Twitter,           evidenceStorage: EvidenceStorageClient,           gpg: GPGClient,           jobStorage: JobStorageClient,           tflockClient: TFlockClient,           dmClient: DMClient,           mediaClient: MediaClient,           chubbySnipeClient: ChubbySnipeClient,           guanoClient: GuanoClient,           deviceClient: DeviceClient,           emailClient: EmailClient,           callback: Callback,           callbackURL: Option[String],           dataRequested: Seq[EvidenceType.EvidenceType],           preservationDataRequested: Seq[EvidenceType.EvidenceType],           zipper: Zipper,           byUser: User,           ttl: TTL.TTL,           addressbookClient: AddressbookClient,           manhattanMetastoreClient: ManhattanMetastoreClient,           requestType: RequestType.RequestType) extends Runnable {    private lazy val log  = Logger.get(getClass)    //TODO(ntaylor)   val jobId: Int = Await.result(jobStorage.newJob(user.id, user.screenName, startDate, endDate, byUser.id, ttl))   val userEvidencePath = localEvidencePath + Await.result(jobStorage.filename(jobId)) + \"/\"   val preservationUserEvidencePath = localEvidencePath + Await.result(jobStorage.preservationFilename(jobId)) + \"/\"   val GPGExclude = Set(EvidenceType.Media , EvidenceType.ProfileImage, EvidenceType.DMMedia, EvidenceType.AnimatedGif)   val evidenceKeyPath = \"%s/evidence-key.txt\".format(userEvidencePath)   /*       - in cases where backend services are down we want to limit certain evidence types being dumped to the ones specified in preservationDataRequested     - dataRequested can only be a set or subset of preservationDataRequested     - LinkedHashMap since order of insertion matters due to evidence key needing to be in the specified order   */   var evidenceTypes = LinkedHashMap(     EvidenceType.UserInfo           -> new UserInfo(userEvidencePath, preservationUserEvidencePath, user, emailClient),     EvidenceType.Device             -> new Device(userEvidencePath, preservationUserEvidencePath, deviceClient, user),     EvidenceType.IpAudit            -> new IpAudit(userEvidencePath, preservationUserEvidencePath, chubbySnipeClient, user, startDate, endDate),     EvidenceType.EmailAddress       -> new EmailAudit(userEvidencePath, preservationUserEvidencePath, guanoClient, user, startDate, endDate),     EvidenceType.Tweet              -> new Tweets(userEvidencePath, preservationUserEvidencePath, twitter, user, startDate, endDate, tflockClient),     EvidenceType.DM                 -> new DM(userEvidencePath, preservationUserEvidencePath, twitter, dmClient, user, startDate, endDate),     EvidenceType.Media              -> new Media(userEvidencePath, preservationUserEvidencePath, twitter, mediaClient, user, startDate, endDate, tflockClient),     EvidenceType.ProfileImage       -> new ProfileImage(userEvidencePath, preservationUserEvidencePath, mediaClient, user),     EvidenceType.Favorite           -> new Favorite(userEvidencePath, preservationUserEvidencePath, user, twitter, tflockClient),     EvidenceType.Addressbook        -> new Addressbook(userEvidencePath, preservationUserEvidencePath, user, addressbookClient),     EvidenceType.Following          -> new Followings(userEvidencePath, preservationUserEvidencePath, twitter, user),     EvidenceType.Follower           -> new Followers(userEvidencePath, preservationUserEvidencePath, twitter, user),     EvidenceType.ListCreate         -> new TwitterList(userEvidencePath, preservationUserEvidencePath, user, twitter, EvidenceType.ListCreate),     EvidenceType.ListSubscribe      -> new TwitterList(userEvidencePath, preservationUserEvidencePath, user, twitter, EvidenceType.ListSubscribe),     EvidenceType.ListMember         -> new TwitterList(userEvidencePath, preservationUserEvidencePath, user, twitter, EvidenceType.ListMember),     EvidenceType.SavedSearch        -> new SavedSearch(userEvidencePath, preservationUserEvidencePath, user),     EvidenceType.Facebook           -> new Facebook(userEvidencePath, preservationUserEvidencePath, user, manhattanMetastoreClient),     EvidenceType.ScreenNameChange   -> new ScreenNameChange(userEvidencePath, preservationUserEvidencePath, user, guanoClient),     EvidenceType.DMMedia            -> new DMMedia(userEvidencePath, preservationUserEvidencePath, twitter, mediaClient, dmClient, user, startDate, endDate),     EvidenceType.AnimatedGif        -> new AnimatedGif(userEvidencePath, preservationUserEvidencePath, user, startDate, endDate, twitter.statuses, mediaClient, tflockClient)    ).filterKeys{x: EvidenceType.EvidenceType => preservationDataRequested.isEmpty || preservationDataRequested.toSet.contains(x)}    val filteredEvidence = evidenceTypes.filterKeys { x: EvidenceType.EvidenceType => dataRequested.toSet.isEmpty || dataRequested.toSet.contains(x) }    def run() = {     log.info(\"Beginning job %d for user %s (%d)\", jobId, user.screenName, user.id)     log.info(\"Evidence path \" + userEvidencePath)     log.info(\"Preservation path \" + preservationUserEvidencePath)      //create dirs     createDirs(userEvidencePath)     createDirs(preservationUserEvidencePath)      //get evidence     val jobFuture = Future.collect((evidenceTypes.keys map { k: EvidenceType.Value =>       log.info(\"Beginning %s evidence dump for user %s (%d)\".format(k, user.screenName, user.id))       val result = evidenceTypes(k).dump()       result.onSuccess { _ => log.info(\"Finished %s evidence dump for user %s (%d)\".format(k, user.screenName, user.id)) }     }).toSeq) flatMap { _ =>       onJobSuccess()     } rescue {       case NonFatal(e) =>         Stats.incr(\"jobs_failed\")         jobStorage.updateJobState(jobId, JobState.Error)         log.error(e, \"Job %s runtime error: \".format(jobId))          Future.Done     } ensure {       evidenceStorage.removeLocalFiles(jobId)       log.info(\"Local files removed: \" + userEvidencePath)       callbackURL match {         case Some(u) => callback.url(u, jobId)         case None    => log.debug(\"No URL to callback for job \" + jobId)       }     }      Await.result(jobFuture)   }    private def onJobSuccess(): Future[Unit] = {     Seq(userEvidencePath, preservationUserEvidencePath).foreach { dir =>       if(!gpg.extractPublicKey(createGPGKey(dir))) {         val msg = \"Failed to add public key to the dump\"          log.error(msg)         Future.exception(new RuntimeException(msg))       }     }      val nonMediaEvidence = evidenceTypes.filter { case (k,v) => !GPGExclude.contains(k) }     val gpgPaths = getEvidenceFilePaths(EvidenceFile.Preservation, nonMediaEvidence) ++ getEvidenceFilePaths(EvidenceFile.Evidence, nonMediaEvidence)     gpg.signContents(gpgPaths)      writeKeyFile      Future.collect(Seq(       jobStorage.preservationFilename(jobId) -> EvidenceFile.Preservation,       jobStorage.filename(jobId) -> EvidenceFile.Evidence     ) map { case (k, preserve) =>       k flatMap { fnWithoutExtension =>         val fileName = \"%s.zip\".format(fnWithoutExtension)          zip(localEvidencePath + fileName, preserve)          log.info(fileName + \" zipped up\")         val hdfsStoragePath = evidenceStorage.storeInHDFS(fileName, ttl)         val scribingTypes = preserve match {           case EvidenceFile.Evidence => filteredEvidence.keys.toSeq           case EvidenceFile.Preservation => evidenceTypes.keys.toSeq         }          scribingTypes.foreach(jobStorage.addEvidenceDumped(jobId, _, preserve))         guanoClient.jobCreateScribe(user.id,           byUser.id,           jobId,           scribingTypes,           ttl,           preserve)         log.info(\"File stored in HDFS: \" + hdfsStoragePath)          Future.Done       }     }) flatMap { _ =>       Stats.incr(\"jobs_succeeded\")       jobStorage.updateJobState(jobId, JobState.Completed)     } flatMap { _ => Future.Done }   }     def getEvidenceFilePaths(fileType: EvidenceFile.Value, evidence: scala.collection.Map[EvidenceType.EvidenceType, Evidence] = evidenceTypes): Set[String] = fileType match {     case EvidenceFile.Preservation  => evidence.map { case (k,v) => { v.preservationFilePath }}.toSet     case EvidenceFile.Evidence      => evidence.map { case (k,v) => { v.evidenceFilePath }}.toSet   }    private def createDirs(path: String)            = (new File(path)).mkdirs()   private def createGPGKey(path: String)          = (new File(path+\"twitter-public-key-gpg.asc\"))    private def zip(zipFileName: String, preserve: EvidenceFile.EvidenceFile) = {     preserve match {       case EvidenceFile.Preservation => {         val dirs = getEvidenceFilePaths(EvidenceFile.Preservation)         zipper.archive(zipFileName, dirs, preservationUserEvidencePath)       }       case EvidenceFile.Evidence => {         val dirs = getEvidenceFilePaths(EvidenceFile.Evidence, filteredEvidence) + evidenceKeyPath         zipper.archive(zipFileName, dirs, userEvidencePath)       }     }   }    /* key file is only provided for the evidence file - not preservation       KEY FILE OUTPUT FORMAT            Evidence Request Key      --------     Evidence Title     [username]-filename.txt - description     field1: field description     field2: field description      URFO Request Key     ---------     [username]-filename.txt - description    */   private def writeKeyFile = {     val evidenceKeyWriter = new PrintWriter(new File(evidenceKeyPath))     var output = ListBuffer[String]()     // keySet.iterator because of insertion order being lost due to bug in scala 2.9: https://groups.google.com/forum/?fromgroups=#!topic/scala-user/4RoDdRe4T1Q     filteredEvidence.keySet.iterator.foreach { e =>       log.info(\"Writing key for \" + e.toString)       val evidenceRequestType = EvidenceTraits(e).evidenceRequestType       val filename = \"[username]-%s.%s\".format(EvidenceKey.getFilename(e), EvidenceKey.getFileExtension(e))       requestType match {         case RequestType.Evidence => {           val description = \"%s: %s\".format(filename, EvidenceKey.getEvidenceDescription(e))           evidenceRequestType match {             case RequestType.Evidence => {               // disabled until headers are added for URFO types as well               // output +:= EvidenceKey.getName(e).get               output +:= description               EvidenceKey.getFields(e).iterator.foreach { case(k,v) => output +:=  \"%s: %s\".format(k,v) }             }             case RequestType.URFO => output +:= description           }         }         case RequestType.URFO => output +:= \"%s: %s\".format(filename, EvidenceKey.getUrfoDescription(e))       }       output +:= \"\"       output +:= Formatter.spacer       output +:= \"\"     }     output.reverse.foreach(evidenceKeyWriter.println(_))     evidenceKeyWriter.close()   } }  object RequestType extends Enumeration {   type RequestType = Value   val URFO = Value(\"urfo\")   val Evidence = Value(\"evidence\")    def apply(`type`: String): Option[RequestType] = RequestType.values.find(_.toString == `type`) }  object EvidenceFile extends Enumeration {   type EvidenceFile = Value   val Preservation, Evidence = Value }  object TTL extends Enumeration {   type TTL = Value   val Days90  = Value(\"90\")   val Days21  = Value(\"21\")   val DaysIndefinite = Value(\"indefinite\")    def apply(ttl: String): Option[TTL] = TTL.values.find(_.toString == ttl)    def zipbirdToGuanoType(ttl: TTL.TTL): Option[ZipbirdRetentionPeriod] = {     val retentionMap = Map(       Days90  -> ZipbirdRetentionPeriod.Days90,       Days21  -> ZipbirdRetentionPeriod.Days21,       DaysIndefinite -> ZipbirdRetentionPeriod.Indefinite     )     retentionMap.get(ttl)   } }  generated by cgit v0.9.2 at 2014-08-08 23:08:32 (GMT)", "user_id"=>"3"}, "commit"=>"Create Micropost"}
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35m (0.0ms)[0m  rollback transaction
  Rendered microposts/_form.html.erb (4.1ms)
  Rendered microposts/new.html.erb within layouts/application (5.6ms)
Completed 200 OK in 12ms (Views: 10.1ms | ActiveRecord: 0.1ms)


Started GET "/assets/microposts.css?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/jquery_ujs.js?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/scaffolds.css?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/application.css?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/jquery.js?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/users.css?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/turbolinks.js?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/users.js?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/microposts.js?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700


Started GET "/assets/application.js?body=1" for 127.0.0.1 at 2014-08-09 21:27:24 -0700
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1 OFFSET 1
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1
  [1m[36mMicropost Load (0.2ms)[0m  [1mSELECT "microposts".* FROM "microposts"  WHERE "microposts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35mMicropost Load (0.1ms)[0m  SELECT "microposts".* FROM "microposts"  WHERE "microposts"."user_id" = ?  [["user_id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users"   ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users"  WHERE (10) LIMIT 1
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users"  WHERE (1) LIMIT 1[0m
